#! /usr/bin/env python3
"""OpenVPN key management utility.

Usage:
    vpnkeymgr (gen|generate) <vars> [options]
    vpnkeymgr sync <names>... [options]

Options:
    --basedir=<basedir>     Specifies the base directory to use.
    --name=<name>           Specifies the VPN key's common name.
    --user=<user>           Specifies the user to login as.
    --host=<host>           Specifies the sync target's host name.
    --path=<path>           Specifies the sync target path.
    --identity=<identity>   Specifies the identity file to use.
"""
from pathlib import Path
from subprocess import CalledProcessError
from sys import stderr, exit as exit_

from vpnkeymgr.common import print_called_process_error
from vpnkeymgr.generator import Keygen
from vpnkeymgr.syncer import Syncer


def generate(basedir, options):
    """Generates a new VPN key."""

    vars_ = options['<vars>']
    name = options['--name']
    keygen = Keygen(basedir, vars_)

    try:
        key = keygen.genkey(name=name)
    except CalledProcessError:
        print('Failed to generate key.', file=stderr)
        return 1
    else:
        print('Generated key: {}.'.format(key))
        return 0


def synchronize(basedir, options):
    """Synchronizes keys to a remote host."""

    syncer = Syncer(basedir, *options['<names>'])
    completed_process = syncer.sync(
        host=options['--host'], path=options['--path'], user=options['--user'],
        identity=options['--identity'])

    try:
        completed_process.check_returncode()
    except CalledProcessError as called_process_error:
        print_called_process_error(called_process_error)
        return 3
    else:
        return 0


def main(options):
    """Runs the VPN key manager."""

    if options['--basedir']:
        basedir = Path(options['--basedir'])
    else:
        basedir = Path.cwd()

    if options['gen'] or options['generate']:
        return generate(basedir, options)
    elif options['sync']:
        return synchronize(basedir, options)
    else:
        print('Unimplemented operation mode.', file=stderr)
        return 4


if __name__ == '__main__':
    from docopt import docopt
    exit_(main(docopt(__doc__)))
