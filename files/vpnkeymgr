#! /usr/bin/env python3
"""OpenVPN key management utility.

Usage:
    vpnkeymgr (gen|generate) <name> [options]
    vpnkeymgr sync <names>... [options]

Options:
    --basedir=<basedir>     Specifies the base directory to use.
    --user=<user>           Specifies the user to login as.
    --host=<host>           Specifies the sync target's host name.
    --path=<path>           Specifies the sync target path.
    --identity=<identity>   Specifies the identity file to use.
"""
from pathlib import Path
from subprocess import CalledProcessError
from sys import stderr, exit as exit_

from docopt import docopt

from vpnkeymgr import CommonNameExists, print_cpr, Keygen, Syncer


def _basedir(options):
    """Returns the respective base dir."""

    if options['--basedir']:
        return Path(options['--basedir'])

    return Path.cwd()


def generate(options):
    """Generates a new VPN key."""

    name = options['<name>']
    keygen = Keygen(_basedir(options))

    try:
        key_name, completed_process = keygen.genkey(name=name)
    except CommonNameExists as common_name_exists:
        print('Common name "{}" already exists.'.format(
            common_name_exists), file=stderr, flush=True)
        return 2

    try:
        completed_process.check_returncode()
    except CalledProcessError:
        print('Failed to generate key.', file=stderr)
        return 1
    else:
        print(f'Generated key "{key_name}".')

    return 0


def synchronize(options):
    """Synchronizes keys to a remote host."""

    syncer = Syncer(_basedir(options), *options['<names>'])
    completed_process = syncer.sync(
        host=options['--host'], path=options['--path'], user=options['--user'],
        identity=options['--identity'])

    try:
        completed_process.check_returncode()
    except CalledProcessError as called_process_error:
        print_cpr(called_process_error)
        return 3

    return 0


def main(options):
    """Runs the VPN key manager."""

    if options['gen'] or options['generate']:
        return generate(options)

    if options['sync']:
        return synchronize(options)

    print('Unimplemented operation mode.', file=stderr)
    return 4


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
